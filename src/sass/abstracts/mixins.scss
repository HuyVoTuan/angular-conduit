@import 'variables';
/* 
  Generate utitlity classes 
*/

/** 
    * @description:
    * This mixin generates utility classes for a given property and map of values.
    * Classes are generated by default. 
    *  @param {string} $className - The class name to generate.
    *  @param {string} $attribute - The CSS property to apply.
    *  @param {any} $value - The values to apply.
    *  @return {class} - The generated utility classes.
**/
@mixin generate-class($className, $attribute, $value) {
  .#{$className} {
    #{$attribute}: #{$value};
  }
}

/**
 * @description:
 * Mixin to generate CSS classes with specified attribute values.
 * @param {String} $className - The base name for the generated classes.
 * @param {String} $attribute - The CSS attribute to be applied.
 * @param {List} $values - The list of values to be used for the attribute.
 * @param {Number} $min - The minimum value for the loop (default: 0).
 * @param {Number} $max - The maximum value for the loop (default: 10).
 * @param {Number} $step - The step increment for the loop (default: 1).
 * @param {Number} $counter - The multiplier for the attribute value (default: 4px).
 * @param {Boolean} $isResponsive - Flag to determine if responsive classes should be generated (default: false).
 *
 * @example
 * // Generates classes like .className-0, .className-4, .className-8, etc.
 * @include generate-classes('m', 'margin', 0, 10, 1, 4px, true);
 */
@mixin generate-classes($className, $attribute, $min: 0, $max: 10, $step: 1, $counter: 4px, $isResponsive: false) {
  @if $isResponsive {
    @for $i from $min through $max {
      $original: #{$className}-#{$i * $step};
      $value: $i * $step * $counter;

      @include generate-class-responsive($original, $attribute, $value);
    }
  } @else {
    @for $i from $min through $max {
      $original: #{$className}-#{$i * $step};
      $value: $i * $step * $counter;

      @include generate-class($original, $attribute, $value);
    }
  }
}

/** 
    * @description:
    * This mixin generates utility classes for a given property and map of values.
    * Responsive classes are generated by default. 
    * @param {string} $className - The class name to generate.
    *  @param {string} $attribute - The CSS property to apply.
    *  @param {any} $value - The values to apply.
    *  @variable {map} $breakpoint-suffix - Dedicated screen breakpoints for responsive classes.
    *  @return {class} - The generated responsive utility classes.

    *  @example
    * breakpoint-suffix: {
    *   sm: 640px,
    *   md: 768px,
    *   lg: 1024px,
    *   xl: 1280px,
    *   xxl: 1536px,
    * }
**/
@mixin generate-class-responsive($className, $attribute, $value) {
  @each $screenSize, $screenWidth in $breakpoint-suffix {
    .#{$screenSize}\:#{$className} {
      @media screen and (min-width: $screenWidth) {
        #{$attribute}: #{$value};
      }
    }
  }
}
